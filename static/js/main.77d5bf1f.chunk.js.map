{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","isGreen","isGrey","isPurple","props","Card","onClick","className","CardContent","Typography","color","isloading","casesTypeColors","hex","mulitiplier","recovered","deaths","vaccinations","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","vaccines","casesType","center","zoom","ChangeView","useMap","setView","mapData","allCountries","vacCountries","vacMap","i","length","vaccineTotals","timeline","Object","keys","key","push","lastIdx","vacInfo","today","set","country","has","result","currCountry","currRadius","Math","sqrt","get","currData","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","flagUrl","flag","countryName","combineMapData","MapContainer","scrollWheelZoom","TileLayer","attribution","url","map","Circle","Popup","style","backgroundImage","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","LineGraph","useState","setData","borderColor","setBorderColor","backgroundColor","setBackgroundColor","useEffect","fetch","then","response","json","fetchData","datasets","App","setCountries","setCountry","setCountryInfo","vaccineInfo","setVaccineInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","mapVaccines","setMapVaccines","setCasesType","isLoading","setLoading","name","iso2","sortedData","getCountriesData","getVaccineData","onCountryChange","event","countryCode","target","vacUrl","FormControl","Select","variant","onChange","MenuItem","todayCases","e","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77d5bf1f.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\nfunction InfoBox({ title, cases, total, active, isRed, isGreen, isGrey, isPurple, ...props }) {\r\n  return (\r\n    <Card \r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} \r\n        ${isRed && \"infoBox--red\"}\r\n        ${isGreen && \"infoBox--green\"}\r\n        ${isGrey && \"infoBox--grey\"}\r\n        ${isPurple && \"infoBox--purple\"}`}\r\n    >\r\n      <CardContent>\r\n        <div>\r\n          {/* Title */}\r\n          <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n            {title}\r\n          </Typography>\r\n\r\n          {/* Today's number of cases */}\r\n          <h2 \r\n            className={`infoBox__cases \r\n              ${isRed && \"infoBox__cases--red\"}\r\n              ${isGreen && \"infoBox__cases--green\"}\r\n              ${isGrey && \"infoBox__cases--grey\"}\r\n              ${isPurple && \"infoBox__cases--purple\"}`}\r\n          >\r\n            {props.isloading ? <i className=\"fa fa-cog fa-spin fa-fw\" /> : cases}\r\n          </h2>\r\n\r\n          {/* Total number of cases */}\r\n          <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n            {total} Total\r\n          </Typography>\r\n        </div>        \r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    // rgb: \"rgb(204,16,52)\",\r\n    // half_op: \"rgba(204,16,52,0.5)\",\r\n    mulitiplier: 200,\r\n  },\r\n\r\n  recovered: {\r\n    hex: \"#7DD71D\",\r\n    // rgb: \"rgb(125,215,29)\",\r\n    // half_op: \"rgba(125,215,29,0.5)\",\r\n    mulitiplier: 200,\r\n  },\r\n\r\n  deaths: {\r\n    hex: \"#C0C0C0\",\r\n    // rgb: \"rgb(251,68,67)\",\r\n    // half_op: \"rgba(251,68,67,0.5)\",\r\n    mulitiplier: 400,\r\n  },\r\n\r\n  vaccinations: {\r\n    hex: \"#9809eb\",\r\n    mulitiplier: 100\r\n  }\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\r\n\r\n  // ALTERNATE WAY OF SORTING\r\n  // sortedData.sort((a, b) => {\r\n  //   if (a.cases > b.cases) {\r\n  //     return -1;\r\n  //   } else {\r\n  //     return 1;\r\n  //   }\r\n  // })\r\n  // return sortedData;\r\n}\r\n\r\n// Combines both sources of data into clean format for map rendering\r\nexport const combineMapData = (allCountries, vacCountries, casesType=\"cases\") => {\r\n  var vacMap = new Map();\r\n  // iterate through countries that track vaccinations and generate their data\r\n  for (var i = 0; i < vacCountries.length; i++) {\r\n    // get today's number and total number of vaccinations for current country\r\n    let vaccineTotals = [];\r\n    var data = vacCountries[i].timeline; // time series data\r\n    for (var key of Object.keys(data)) {\r\n      vaccineTotals.push(data[key]);\r\n    }\r\n    let lastIdx = vaccineTotals.length - 1;\r\n    const vacInfo = {\r\n      today: vaccineTotals[lastIdx] - vaccineTotals[lastIdx - 2],\r\n      total: vaccineTotals[lastIdx]\r\n    }\r\n\r\n    // add vaccinated country to map\r\n    vacMap.set(vacCountries[i].country, vacInfo);\r\n  }\r\n\r\n  // set default values for countries that don't track vaccinations\r\n  for (i = 0; i < allCountries.length; i++) {\r\n    if(!vacMap.has(allCountries[i].country)) {\r\n      vacMap.set(allCountries[i].country, {today: 0, total: 0});\r\n    }\r\n  }\r\n\r\n  // generate and return clean map data\r\n  var result = [];\r\n  for (i = 0; i < allCountries.length; i++) {\r\n    var currCountry = allCountries[i].country;\r\n    var currRadius = 0;\r\n    if(casesType === \"vaccinations\") {\r\n      currRadius = Math.sqrt(vacMap.get(currCountry).total / 10) * casesTypeColors[\"vaccinations\"].mulitiplier;\r\n    } else {\r\n      currRadius = Math.sqrt(allCountries[i][casesType] / 10) * casesTypeColors[casesType].mulitiplier;\r\n    }\r\n\r\n    var currData = {\r\n      center: [allCountries[i].countryInfo.lat, allCountries[i].countryInfo.long],\r\n      fillOpacity: 0.4,\r\n      pathOptions: {\r\n        color: casesTypeColors[casesType].hex,\r\n        fillColor: casesTypeColors[casesType].hex,\r\n      },\r\n      radius: currRadius,\r\n      flagUrl: allCountries[i].countryInfo.flag,\r\n      countryName: allCountries[i].country,\r\n      cases: allCountries[i].cases,\r\n      recovered: allCountries[i].recovered,\r\n      deaths: allCountries[i].deaths,\r\n      vaccinations: vacMap.get(currCountry).total\r\n    }\r\n    result.push(currData);\r\n  }\r\n  return result;\r\n}\r\n\r\n// Render circles on map with interactive tooltips\r\nexport const renderDataOnMap = (data) =>\r\n  data.map(country => (\r\n    <Circle\r\n      center={country.center}\r\n      fillOpacity={country.fillOpacity}\r\n      pathOptions={country.pathOptions}     \r\n      radius={country.radius}\r\n    >\r\n      <Popup>\r\n      <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.flagUrl})` }}\r\n          />\r\n          <div className=\"info-name\">{country.countryName}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-vaccinations\">\r\n            Vaccinations: {numeral(country.vaccinations).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n\r\n    </Circle>\r\n  ));\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","import React from 'react';\r\nimport \"./Map.css\";\r\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\r\nimport { renderDataOnMap, combineMapData } from \"./util\";\r\n\r\nfunction Map({ countries, vaccines, casesType, center, zoom}) {\r\n  function ChangeView({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n    return null;\r\n  }\r\n  const mapData = combineMapData(countries, vaccines, casesType);\r\n  return (\r\n    <div className=\"map\">\r\n      <MapContainer\r\n        casesType={casesType}\r\n        className=\"map\"\r\n        center={center}\r\n        zoom={zoom}\r\n        scrollWheelZoom={false}\r\n      >\r\n        <ChangeView center={center} zoom={zoom} />\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {/* Loop through countries and draw circles on screen */}\r\n        {/* {renderDataOnMap(countries, casesType)} */}\r\n        {renderDataOnMap(mapData)}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({countries}) {\r\n  return <div className=\"table\">\r\n    {/* For every country: split it apart, get the \r\n        country and cases, and render row in table */}\r\n    {countries.map(({country, cases}) => (\r\n      <tr>\r\n        <td>{country}</td>\r\n        <td><strong>{numeral(cases).format(\"000,000\")}</strong></td>\r\n      </tr>\r\n    ))} \r\n  </div>;\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n//https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n\r\n// generates line graph data\r\nconst buildChartData = (data, casesType=\"cases\") => {\r\n  // if-else needed because of different data formats\r\n  if (casesType === \"vaccinations\") {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data) {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: data[date] - lastDataPoint\r\n        }\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[date];\r\n    }\r\n    return chartData;\r\n  } else {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint\r\n        }\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n  }\r\n};\r\n\r\n// LineGraph component\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n  const [borderColor, setBorderColor] = useState(\"#CC1034\");\r\n  const [backgroundColor, setBackgroundColor] = useState(\"rgba(204, 16, 52, 0.5)\");\r\n  // get appropriate data depending on which info box is selected\r\n  useEffect(() => {\r\n    // set appropriate color\r\n    if (casesType === \"cases\") {\r\n      setBorderColor(\"#CC1034\");\r\n      setBackgroundColor(\"rgba(204, 16, 52, 0.5)\");\r\n    } else if (casesType === \"recovered\") {\r\n      setBorderColor(\"#7DD71D\");\r\n      setBackgroundColor(\"rgba(125,215,29,0.5)\");\r\n    } else if (casesType === \"deaths\") {\r\n      setBorderColor(\"#C0C0C0\");\r\n      setBackgroundColor(\"rgba(192, 192, 192, 0.5)\");\r\n    } else if (casesType === \"vaccinations\") {\r\n      setBorderColor(\"#9809eb\");\r\n      setBackgroundColor(\"rgba(152, 9, 235, 0.5)\");\r\n    }\r\n    \r\n    // set appropriate data\r\n    if (casesType === \"vaccinations\") {\r\n      const fetchData = async () => {\r\n        await fetch(\"https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=60\")\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            const chartData = buildChartData(data, casesType);\r\n            setData(chartData);\r\n          });\r\n      }\r\n      fetchData();      \r\n    } else {\r\n      const fetchData = async () => {\r\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=60\")\r\n          .then((response) => {\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            const chartData = buildChartData(data, casesType);\r\n            setData(chartData);\r\n          });\r\n      }\r\n      fetchData();\r\n    }\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options = {options}\r\n          data={{\r\n            datasets: [{\r\n              backgroundColor: backgroundColor,\r\n              borderColor: borderColor,\r\n              data: data,\r\n            }]\r\n          }}\r\n        /> \r\n      )}\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LineGraph\r\n","import './App.css';\r\nimport { useState, useEffect } from \"react\";\r\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\r\nimport InfoBox from './InfoBox';\r\nimport \"./InfoBox.css\";\r\nimport Map from './Map';\r\nimport Table from './Table';\r\nimport LineGraph from './LineGraph';\r\nimport { sortData, prettyPrintStat } from \"./util\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nfunction App() {\r\n  // State = how to write a variable in react\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCountry] = useState('worldwide');\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [vaccineInfo, setVaccineInfo] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n  const [mapVaccines, setMapVaccines] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n\r\n  // USEEFFECT = runs a piece of code based on a given condition\r\n  // get worldwide cases, recovered, and deaths data on initial page load for info boxes\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/all?yesterday=true\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountryInfo(data);\r\n      });\r\n  }, []);\r\n\r\n  // get worldwide vaccine data on initial page load for info boxes\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=all\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        let vaccineTotals = [];\r\n        for (var key of Object.keys(data)) {\r\n          vaccineTotals.push(data[key]);\r\n        }\r\n\r\n        let lastIdx = vaccineTotals.length - 1;\r\n        const vacInfo = {\r\n          today: vaccineTotals[lastIdx] - vaccineTotals[lastIdx - 2],\r\n          total: vaccineTotals[lastIdx]\r\n        }\r\n        setVaccineInfo(vacInfo);\r\n      });\r\n  }, []);\r\n\r\n  // get data for populating dropdown menu and table.\r\n  // also gets non-vaccine Map data\r\n  useEffect(() => {\r\n    // async -> send a request, wait for it, do something\r\n    const getCountriesData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const countries = data.map((country) => (\r\n          {\r\n            name: country.country, // United Kingdom, United States, France\r\n            value: country.countryInfo.iso2 // UK, USA, FR\r\n          }));\r\n          const sortedData = sortData(data);\r\n          setTableData(sortedData);\r\n          setCountries(countries);\r\n          setMapCountries(data);\r\n      });\r\n    };\r\n\r\n    getCountriesData();\r\n  }, []); // code would also run when countries changes (e.g., [countries])\r\n\r\n  // gets vaccine Map data\r\n  useEffect(() => {\r\n    const getVaccineData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/vaccine/coverage/countries?lastdays=all\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setMapVaccines(data);\r\n        });\r\n    };\r\n    getVaccineData();\r\n  }, []);\r\n\r\n  // triggers when user selects a new country in dropdown menu\r\n  const onCountryChange = async (event) => {\r\n    // sets flag to wait until data is loaded\r\n    setLoading(true);\r\n\r\n    // country code of currently selected country in dropdown\r\n    const countryCode = event.target.value;\r\n\r\n    // url for fetching data for current country\r\n    const url = \r\n      countryCode === 'worldwide' \r\n        ? \"https://disease.sh/v3/covid-19/all?yesterday=true\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}?yesterday=true`;\r\n    \r\n    // getting vaccination data to display in info boxes\r\n    const vacUrl =\r\n      countryCode === 'worldwide'\r\n        ? \"https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=all\"\r\n        : `https://disease.sh/v3/covid-19/vaccine/coverage/countries/${countryCode}?lastdays=all`;\r\n\r\n    // updating vaccineInfo for info boxes when country is changed\r\n    await fetch(vacUrl)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        let timeline = data;\r\n        \r\n        if (countryCode !== \"worldwide\") {\r\n          timeline = data.timeline;\r\n        }\r\n\r\n        let vaccineTotals = [];\r\n        for (var key of Object.keys(timeline)) {\r\n          vaccineTotals.push(timeline[key]);\r\n        }\r\n\r\n        let lastIdx = vaccineTotals.length - 1;\r\n        const vacInfo = {\r\n          today: vaccineTotals[lastIdx] - vaccineTotals[lastIdx - 2],\r\n          total: vaccineTotals[lastIdx]\r\n        }\r\n        \r\n        setVaccineInfo(vacInfo);\r\n      });\r\n\r\n    // get data for current country\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then(data => {\r\n        // render country name on dropdown (visible when dropdown is not open) \r\n        setCountry(countryCode);\r\n\r\n        // all of the data from the country response\r\n        setCountryInfo(data);\r\n\r\n        // data is finished loading\r\n        setLoading(false)\r\n        \r\n        // adjust location and zoom on map depending on which country is selected\r\n        countryCode === \"worldwide\"\r\n          ? setMapCenter([34.80746, -40.4796])\r\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n        setMapZoom(4);\r\n      });\r\n  };\r\n  \r\n  // ROOT COMPONENT\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__left\">\r\n        {/* Header (title + dropdown menu) */}\r\n        <div className=\"app__header\">\r\n          <h1>COVID-19 Tracker</h1>\r\n          <FormControl className=\"app__dropdown\">\r\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\r\n              {/* Loop through all the countries and show dropdown list of the options */}\r\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\r\n              {countries.map((country) => (\r\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\r\n                ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        \r\n        {/* Statistics */}\r\n        <div className=\"app__stats\">\r\n          <InfoBox \r\n            title=\"COVID-19 Cases\"\r\n            cases={prettyPrintStat(countryInfo.todayCases)} \r\n            total={prettyPrintStat(countryInfo.cases)}\r\n            onClick={(e) => setCasesType(\"cases\")}\r\n            active={casesType === \"cases\"}\r\n            isRed\r\n            isloading={isLoading}\r\n          />\r\n          <InfoBox\r\n            title=\"Recovered\"\r\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\r\n            total={prettyPrintStat(countryInfo.recovered)}\r\n            onClick={(e) => setCasesType(\"recovered\")}\r\n            active={casesType === \"recovered\"}\r\n            isGreen\r\n            isloading={isLoading}\r\n          />\r\n          <InfoBox \r\n            title=\"Deaths\" \r\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\r\n            total={prettyPrintStat(countryInfo.deaths)}\r\n            onClick={(e) => setCasesType(\"deaths\")}\r\n            active={casesType === \"deaths\"}\r\n            isGrey\r\n            isloading={isLoading}\r\n          />\r\n          <InfoBox \r\n            title=\"Vaccinations\"\r\n            cases={prettyPrintStat(vaccineInfo.today)}\r\n            total={prettyPrintStat(vaccineInfo.total)}\r\n            onClick={(e) => setCasesType(\"vaccinations\")}\r\n            active={casesType === \"vaccinations\"}\r\n            isPurple\r\n            isloading={isLoading}\r\n          />        \r\n        </div>\r\n        \r\n        {/* Map */}\r\n        <Map\r\n          countries={mapCountries}\r\n          vaccines={mapVaccines}\r\n          casesType={casesType}\r\n          center={mapCenter}\r\n          zoom={mapZoom}\r\n        />\r\n      </div>\r\n\r\n      <Card className=\"app__right\">\r\n        <CardContent>\r\n          <h3>Live Cases by Country</h3>\r\n          {/* Table */}\r\n          <Table countries={tableData} />\r\n          <h3 className=\"app__graphTitle\">Worldwide daily {casesType}</h3>\r\n          {/* Graph */}\r\n          <LineGraph className=\"app__graph\" casesType={casesType}/>\r\n        </CardContent>\r\n      </Card>\r\n    </div>    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}